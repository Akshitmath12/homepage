// Test generated by RoostGPT for test reactTesst using AI Type Open AI and AI Model gpt-4-1106-preview


// Import statements for React, testing utilities, and the component to be tested
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom/extend-expect'; // For additional matchers
import Component from '../../../../../../src/widgets/openmediavault/methods/smart_get_list.jsx'; // Adjusted relative path

// Mock the external dependencies
jest.mock('utils/proxy/use-widget-api', () => ({
  __esModule: true,
  default: jest.fn(),
}));
jest.mock('components/services/widget/container', () => (props) => <div data-testid="container-mock">{props.children}</div>);
jest.mock('components/services/widget/block', () => (props) => <div data-testid="block-mock">{props.label}</div>);

// Define test data
const serviceMock = { widget: 'widgetId' };
const dataMock = {
  response: {
    output: JSON.stringify({
      data: [{ monitor: true, overallstatus: 'GOOD' }, { monitor: true, overallstatus: 'BAD' }]
    })
  }
};

// Define test suite
describe('Component', () => {
  // Define common setup tasks before each test case
  beforeEach(() => {
    jest.resetAllMocks();
  });

  test('calls useWidgetAPI hook with the correct service.widget prop', () => {
    const useWidgetAPI = require('utils/proxy/use-widget-api').default;
    useWidgetAPI.mockReturnValue({ data: null, error: null });
    
    render(<Component service={serviceMock} />);
    
    expect(useWidgetAPI).toHaveBeenCalledWith(serviceMock.widget);
  });

  test('renders error state when there is an error', () => {
    const useWidgetAPI = require('utils/proxy/use-widget-api').default;
    useWidgetAPI.mockReturnValue({ data: null, error: 'some error' });
    
    render(<Component service={serviceMock} />);
    
    expect(screen.getByTestId('container-mock')).toHaveTextContent('some error');
  });

  test('renders the correct number of Block components with correct labels when data is present', () => {
    const useWidgetAPI = require('utils/proxy/use-widget-api').default;
    useWidgetAPI.mockReturnValue({ data: dataMock, error: null });
    
    render(<Component service={serviceMock} />);
    
    const blockElements = screen.getAllByTestId('block-mock');
    expect(blockElements.length).toBe(2); // We expect two Block components
    expect(blockElements[0]).toHaveTextContent('openmediavault.passed');
    expect(blockElements[1]).toHaveTextContent('openmediavault.failed');
  });
});

